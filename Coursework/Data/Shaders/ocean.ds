// Globals
cbuffer MatrixBuffer
{
    matrix worldMatrix;
    matrix viewMatrix;
    matrix projectionMatrix;
	matrix reflectionMatrix;
};

cbuffer CameraBuffer
{
	float3 cameraPosition;
	float2 normalMapTiling;
    float3 padding;
};

cbuffer WaveBuffer
{
	float waveTime;
	float waveHeight;
	float2 padding1;
};

// Typedefs
struct ConstantOutputType
{
    float edges[4] : SV_TessFactor;
    float inside[2] : SV_InsideTessFactor;
};

struct HullOutputType
{
    float3 position : POSITION;
    float2 tex : TEXCOORD0;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
	float4 reflectionPosition : TEXCOORD0;
    float4 refractionPosition : TEXCOORD1;
	float3 viewDirection : TEXCOORD2;
    float2 tex1 : TEXCOORD3;
    float2 tex2 : TEXCOORD4;
};

// Domain Shader
[domain("quad")]

PixelInputType DomainShaderMain(ConstantOutputType input, float2 UV : SV_DomainLocation, const OutputPatch<HullOutputType, 4> patch)
{
	float3 vertexPosition;
	PixelInputType output;
    matrix reflectProjectWorld;
	matrix viewProjectWorld;
	float4 worldPosition;
 
	// Calculate mid point between top left and top right
	float3 topMidpoint = lerp(patch[0].position, patch[1].position, UV.x);
	
	// Calculate the mid point between the bottom left and bottom right
    float3 bottomMidpoint = lerp(patch[3].position, patch[2].position, UV.x);

	// Calculate the position between the two points
    vertexPosition = lerp(topMidpoint, bottomMidpoint, UV.y);

	// Apply water simulation
	vertexPosition.y = (sin(waveTime + vertexPosition.z) + cos(waveTime + vertexPosition.x)) * waveHeight;
    
	// Calculate the position of the new vertex against the matrices
    output.position = mul(float4(vertexPosition, 1.0f), worldMatrix);
    output.position = mul(output.position, viewMatrix);
    output.position = mul(output.position, projectionMatrix);

	// Create the reflection matrix
    reflectProjectWorld = mul(reflectionMatrix, projectionMatrix);
    reflectProjectWorld = mul(worldMatrix, reflectProjectWorld);

	// Calculate the reflected position
    output.reflectionPosition = mul(float4(vertexPosition, 1.0f), reflectProjectWorld);

	// Create the refraction view projection world matrix
    viewProjectWorld = mul(viewMatrix, projectionMatrix);
    viewProjectWorld = mul(worldMatrix, viewProjectWorld);
   
	// Calculate the refraction position
    output.refractionPosition = mul(float4(vertexPosition, 1.0f), viewProjectWorld);
	
	 // Calculate the position of the vertex in the world
    worldPosition = mul(float4(vertexPosition, 1.0f), worldMatrix);

    // Determine the viewing direction and normalise
    output.viewDirection = cameraPosition.xyz - worldPosition.xyz;
    output.viewDirection = normalize(output.viewDirection);
	
	// Calculate the texture coordinates and apply tiling
	output.tex1 = float4(UV.yx, 1-UV.x, 1) / normalMapTiling.x;
	output.tex2 = float4(UV.yx, 1-UV.x, 1) / normalMapTiling.y;

    return output;
}